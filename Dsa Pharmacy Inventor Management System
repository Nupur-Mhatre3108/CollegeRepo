#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Medicine structure (Linked List)
struct Medicine {
    int id;
    char name[50];
    int quantity;
    float price;
    char expiry[15]; // dd/mm/yyyy
    struct Medicine *next;
};

// Stack for Sales (LIFO)
struct Sale {
    int medicineID;
    int quantitySold;
    struct Sale *next;
};

// Queue for Supplier Orders (FIFO)
struct SupplierOrder {
    int medicineID;
    int quantityOrdered;
    struct SupplierOrder *next;
};

// Global heads
struct Medicine *medicineHead = NULL;
struct Sale *saleTop = NULL;
struct SupplierOrder *orderFront = NULL, *orderRear = NULL;

// Function prototypes
void addMedicine();
void displayMedicines();
void searchMedicine();
void updateMedicine();
void deleteMedicine();
void sellMedicine();
void checkExpiry();
void generateReport();
void displaySales();
void addSupplierOrder();
void displayOrders();

// Helper function to check expiry
int isExpired(char expiry[]);

// Add Medicine
void addMedicine() {
    struct Medicine *newMed = (struct Medicine*)malloc(sizeof(struct Medicine));
    printf("Enter ID: "); scanf("%d", &newMed->id);
    printf("Enter Name: "); scanf("%s", newMed->name);
    printf("Enter Quantity: "); scanf("%d", &newMed->quantity);
    printf("Enter Price: "); scanf("%f", &newMed->price);
    printf("Enter Expiry (dd/mm/yyyy): "); scanf("%s", newMed->expiry);

    newMed->next = medicineHead;
    medicineHead = newMed;
    printf("Medicine Added!\n");
}

// Display Medicines
void displayMedicines() {
    struct Medicine *temp = medicineHead;
    if (!temp) { printf("No Medicines!\n"); return; }
    printf("\nID\tName\t\tQty\tPrice\tExpiry\n");
    while (temp) {
        printf("%d\t%s\t%d\t%.2f\t%s\n", temp->id, temp->name, temp->quantity, temp->price, temp->expiry);
        temp = temp->next;
    }
}

// Search Medicine
void searchMedicine() {
    int id;
    printf("Enter Medicine ID to search: ");
    scanf("%d", &id);
    struct Medicine *temp = medicineHead;
    while (temp) {
        if (temp->id == id) {
            printf("Found: %s | Qty: %d | Price: %.2f | Expiry: %s\n",
                   temp->name, temp->quantity, temp->price, temp->expiry);
            return;
        }
        temp = temp->next;
    }
    printf("Medicine Not Found!\n");
}

// Update Medicine
void updateMedicine() {
    int id;
    printf("Enter Medicine ID to update: ");
    scanf("%d", &id);
    struct Medicine *temp = medicineHead;
    while (temp) {
        if (temp->id == id) {
            printf("Enter New Quantity: "); scanf("%d", &temp->quantity);
            printf("Enter New Price: "); scanf("%f", &temp->price);
            printf("Medicine Updated!\n");
            return;
        }
        temp = temp->next;
    }
    printf("Medicine Not Found!\n");
}

// Delete Medicine
void deleteMedicine() {
    int id;
    printf("Enter Medicine ID to delete: ");
    scanf("%d", &id);
    struct Medicine *temp = medicineHead, *prev = NULL;
    while (temp) {
        if (temp->id == id) {
            if (prev) prev->next = temp->next;
            else medicineHead = temp->next;
            free(temp);
            printf("Medicine Deleted!\n");
            return;
        }
        prev = temp;
        temp = temp->next;
    }
    printf("Medicine Not Found!\n");
}

// Sell Medicine & Record Sale
void sellMedicine() {
    int id, qty;
    printf("Enter Medicine ID to sell: "); scanf("%d", &id);
    printf("Enter Quantity to sell: "); scanf("%d", &qty);

    struct Medicine *temp = medicineHead;
    while (temp) {
        if (temp->id == id) {
            if (temp->quantity >= qty) {
                temp->quantity -= qty;
                printf("Sold %d units of %s. Total: %.2f\n", qty, temp->name, qty*temp->price);
                
                // Record Sale in stack
                struct Sale *newSale = (struct Sale*)malloc(sizeof(struct Sale));
                newSale->medicineID = id;
                newSale->quantitySold = qty;
                newSale->next = saleTop;
                saleTop = newSale;
            } else {
                printf("Insufficient Stock!\n");
            }
            return;
        }
        temp = temp->next;
    }
    printf("Medicine Not Found!\n");
}

// Check Expiry
void checkExpiry() {
    struct Medicine *temp = medicineHead;
    int found = 0;
    printf("\nExpired Medicines:\n");
    while (temp) {
        if (isExpired(temp->expiry)) {
            printf("ID: %d | Name: %s | Expiry: %s\n", temp->id, temp->name, temp->expiry);
            found = 1;
        }
        temp = temp->next;
    }
    if (!found) printf("No expired medicines.\n");
}

// Generate Report
void generateReport() {
    struct Medicine *temp = medicineHead;
    float totalValue = 0;
    printf("\nInventory Report:\nID\tName\t\tQty\tTotalValue\n");
    while (temp) {
        float value = temp->quantity * temp->price;
        printf("%d\t%s\t%d\t%.2f\n", temp->id, temp->name, temp->quantity, value);
        totalValue += value;
        temp = temp->next;
    }
    printf("Total Inventory Value: %.2f\n", totalValue);
}

// Display Sales
void displaySales() {
    struct Sale *temp = saleTop;
    if (!temp) { printf("No Sales!\n"); return; }
    printf("\nRecent Sales (LIFO):\n");
    while (temp) {
        printf("Medicine ID: %d | Qty: %d\n", temp->medicineID, temp->quantitySold);
        temp = temp->next;
    }
}

// Add Supplier Order
void addSupplierOrder() {
    struct SupplierOrder *newOrder = (struct SupplierOrder*)malloc(sizeof(struct SupplierOrder));
    printf("Enter Medicine ID to order: "); scanf("%d", &newOrder->medicineID);
    printf("Enter Quantity: "); scanf("%d", &newOrder->quantityOrdered);
    newOrder->next = NULL;

    if (!orderRear) orderFront = orderRear = newOrder;
    else { orderRear->next = newOrder; orderRear = newOrder; }
    printf("Supplier Order Added!\n");
}

// Display Supplier Orders
void displayOrders() {
    struct SupplierOrder *temp = orderFront;
    if (!temp) { printf("No Orders!\n"); return; }
    printf("\nPending Supplier Orders (FIFO):\n");
    while (temp) {
        printf("Medicine ID: %d | Qty: %d\n", temp->medicineID, temp->quantityOrdered);
        temp = temp->next;
    }
}

// Helper: Check if expiry date passed
int isExpired(char expiry[]) {
    int d, m, y;
    sscanf(expiry, "%d/%d/%d", &d, &m, &y);
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    int curDay = tm.tm_mday, curMonth = tm.tm_mon+1, curYear = tm.tm_year+1900;
    if (y < curYear) return 1;
    if (y == curYear && m < curMonth) return 1;
    if (y == curYear && m == curMonth && d < curDay) return 1;
    return 0;
}

// Main Menu
int main() {
    int choice;
    do {
        printf("\n--- Pharmacy Management System ---\n");
        printf("1. Add Medicine\n2. Display Medicines\n3. Search Medicine\n4. Update Medicine\n5. Delete Medicine\n");
        printf("6. Sell Medicine\n7. Check Expiry\n8. Generate Report\n9. Display Sales\n");
        printf("10. Add Supplier Order\n11. Display Orders\n12. Exit\n");
        printf("Enter Choice: "); scanf("%d", &choice);

        switch(choice) {
            case 1: addMedicine(); break;
            case 2: displayMedicines(); break;
            case 3: searchMedicine(); break;
            case 4: updateMedicine(); break;
            case 5: deleteMedicine(); break;
            case 6: sellMedicine(); break;
            case 7: checkExpiry(); break;
            case 8: generateReport(); break;
            case 9: displaySales(); break;
            case 10: addSupplierOrder(); break;
            case 11: displayOrders(); break;
            case 12: printf("Exiting...\n"); break;
            default: printf("Invalid Choice!\n");
        }
    } while(choice != 12);
    return 0;
}
